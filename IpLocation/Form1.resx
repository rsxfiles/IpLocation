<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picFlag.ErrorImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAEgISAAAJgAH/2Q==
</value>
  </data>
</root>